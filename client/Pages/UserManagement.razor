@page "/admin/users"
@using SaunaBooking.Client.Models.DTOs
@using SaunaBooking.Client.Services
@using SaunaBooking.Client.Components
@using Microsoft.AspNetCore.Authorization
@inject UserManagementService UserManagementService
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "admin")]

<PageTitle>Hantering av användare</PageTitle>

<div class="container mt-4">
    <h1>Hantering av användare</h1>

    @if (_users == null)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Laddar sidan...</span>
            </div>
        </div>
    }
    else
    {
        <div class="mb-3">
            <button class="btn btn-primary" @onclick="() => ShowCreateModal()">
                <i class="bi bi-plus-circle"></i> Lägg till användare
            </button>
        </div>

        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Användarnamn</th>
                        <th>Roll</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in _users)
                    {
                        <tr>
                            <td>@user.Id</td>
                            <td>@user.Username</td>
                            <td>@user.Role</td>
                            <td>
                                <button class="btn btn-sm btn-primary me-2" @onclick="() => ShowEditModal(user)">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteModal(user)">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@if (_showCreateModal)
{
    <Modal IsVisible="@_showCreateModal" IsVisibleChanged="@((value) => _showCreateModal = value)" Title="Create User">
        <Body>
            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <input type="text" class="form-control" id="username" @bind="_newUser.Username" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <input type="password" class="form-control" id="password" @bind="_newUser.Password" />
            </div>
            <div class="mb-3">
                <label for="role" class="form-label">Role</label>
                <select class="form-select" id="role" @bind="_newUser.Role">
                    <option value="user">User</option>
                    <option value="admin">Admin</option>
                </select>
            </div>
        </Body>
        <Footer>
            <button class="btn btn-secondary" @onclick="() => _showCreateModal = false">Cancel</button>
            <button class="btn btn-primary" @onclick="CreateUser">Create</button>
        </Footer>
    </Modal>
}

@if (_showEditModal)
{
    <Modal IsVisible="@_showEditModal" IsVisibleChanged="@((value) => _showEditModal = value)" Title="Edit User">
        <Body>
            <div class="mb-3">
                <label for="edit-username" class="form-label">Username</label>
                <input type="text" class="form-control" id="edit-username" value="@_selectedUser.Username" disabled />
            </div>
            <div class="mb-3">
                <label for="edit-password" class="form-label">New Password</label>
                <input type="password" class="form-control" id="edit-password" @bind="_updateRequest.Password" />
            </div>
            <div class="mb-3">
                <label for="edit-role" class="form-label">Role</label>
                <select class="form-select" id="edit-role" @bind="_updateRequest.Role">
                    <option value="user">User</option>
                    <option value="admin">Admin</option>
                </select>
            </div>
        </Body>
        <Footer>
            <button class="btn btn-secondary" @onclick="() => _showEditModal = false">Cancel</button>
            <button class="btn btn-primary" @onclick="UpdateUser">Save</button>
        </Footer>
    </Modal>
}

@if (_showDeleteModal)
{
    <Modal IsVisible="@_showDeleteModal" IsVisibleChanged="@((value) => _showDeleteModal = value)" Title="Delete User">
        <Body>
            <p>Are you sure you want to delete user "@_selectedUser.Username"?</p>
        </Body>
        <Footer>
            <button class="btn btn-secondary" @onclick="() => _showDeleteModal = false">Cancel</button>
            <button class="btn btn-danger" @onclick="DeleteUser">Delete</button>
        </Footer>
    </Modal>
}

@code {
    private List<UserDto>? _users;
    private bool _showCreateModal;
    private bool _showEditModal;
    private bool _showDeleteModal;
    private UserDto _selectedUser = new();
    private CreateUserRequest _newUser = new();
    private UpdateUserRequest _updateRequest = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        _users = await UserManagementService.GetUsersAsync();
    }

    private void ShowCreateModal()
    {
        _newUser = new CreateUserRequest();
        _showCreateModal = true;
    }

    private void ShowEditModal(UserDto user)
    {
        _selectedUser = user;
        _updateRequest = new UpdateUserRequest
        {
            Role = user.Role
        };
        _showEditModal = true;
    }

    private void ShowDeleteModal(UserDto user)
    {
        _selectedUser = user;
        _showDeleteModal = true;
    }

    private async Task CreateUser()
    {
        try
        {
            await UserManagementService.CreateUserAsync(_newUser);
            _showCreateModal = false;
            await LoadUsers();
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling
            Console.WriteLine($"Error creating user: {ex.Message}");
        }
    }

    private async Task UpdateUser()
    {
        try
        {
            await UserManagementService.UpdateUserAsync(_selectedUser.Id, _updateRequest);
            _showEditModal = false;
            await LoadUsers();
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling
            Console.WriteLine($"Error updating user: {ex.Message}");
        }
    }

    private async Task DeleteUser()
    {
        try
        {
            await UserManagementService.DeleteUserAsync(_selectedUser.Id);
            _showDeleteModal = false;
            await LoadUsers();
        }
        catch (Exception ex)
        {
            // TODO: Add proper error handling
            Console.WriteLine($"Error deleting user: {ex.Message}");
        }
    }
} 