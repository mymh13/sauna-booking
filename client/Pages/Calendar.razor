@page "/calendar"
@using System.Globalization
@using SaunaBooking.Client.Services
@using SaunaBooking.Client.Components
@inject HttpClient Http
@inject IJSRuntime JS
@inject UserSessionService userSessionService

<div class="calendar-wrapper">
    <h1 class="text-center my-4 text-2xl font-semibold">Bokningskalender</h1>

    <!-- Date/week header with responsive font size -->
    <div class="text-center text-sm sm:text-base font-semibold mb-4">
        <span>@StartOfWeek.ToString("yyyy-MM-dd") / Vecka @CurrentWeekNumber / @EndOfWeek.ToString("yyyy-MM-dd")</span>
    </div>

    <div class="overflow-x-auto">
        <div class="calendar-grid text-center">
            <table class="table-auto border-collapse">
                <thead>
                    <tr>
                        <!-- Smaller font + padding on mobile for header column -->
                        <th class="border p-1 text-xs sm:text-sm md:text-base">Tid</th>
                        @foreach (var day in DaysOfWeek)
                        {
                            <!-- Smaller font + padding on mobile for weekday headers -->
                            <th class="border p-1 text-xs sm:text-sm md:text-base cursor-pointer hover:bg-gray-100" @onclick="() => OpenDay(day)">
                                @CapitalizeFirstLetter(day.ToString("ddd dd MMM", new CultureInfo("sv-SE")))
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var slot in TimeSlots)
                    {
                        <tr>
                            <td class="border p-2">@slot.Label</td>
                            @foreach (var day in DaysOfWeek)
                            {
                                var status = GetSlotStatus(day, slot.StartTime);

                                <!-- Dynamic width on mobile, no padding -->
                                <td class="aspect-square w-10 sm:w-12 md:w-14 border p-0 text-center hover:cursor-pointer"
                                    @onclick="() => BookSlot(day, slot.StartTime)"
                                    style="background-color:@BookingStatusHelper.GetColorForStatus(status)"
                                    title="@GetUsernameForSlot(day, slot.StartTime)">
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
            @if (!string.IsNullOrWhiteSpace(bookingMessage))
            {
                <div class="mt-4 text-red-600 text-center font-semibold">@bookingMessage</div>
            }
        </div>
    </div>
</div>

<BookingPopup 
    Visible="showPopup"
    CurrentStatus="selectedStatus"
    OnStatusSelected="HandlePopupResult" />

@code {
    private DateTime Today = DateTime.Today;
    private DateTime StartOfWeek;
    private DateTime EndOfWeek;
    private List<DateTime> DaysOfWeek = new();
    private List<TimeSlot> TimeSlots = new();
    private List<Booking> AllBookings = new();
    private bool showPopup = false;
    private DateTime selectedDay;
    private TimeSpan selectedTime;
    private string selectedStatus = "Free";
    private string selectedUsername = "";
    private string bookingMessage = "";

    protected override async Task OnInitializedAsync()
    {
        CalculateWeek(Today);
        GenerateTimeSlots();
        AllBookings = await Http.GetFromJsonAsync<List<Booking>>("/bookings") ?? new();
        AllBookings = AllBookings
            .Select(b => {
                b.Date = b.Date.Date; // Normalize to midnight, strip 22:00 etc
                return b;
            }).ToList();
    }

    private void CalculateWeek(DateTime referenceDate)
    {
        var diff = (7 + (referenceDate.DayOfWeek - DayOfWeek.Monday)) % 7;
        StartOfWeek = referenceDate.AddDays(-diff).Date;
        EndOfWeek = StartOfWeek.AddDays(6);
        DaysOfWeek = Enumerable.Range(0, 7).Select(i => StartOfWeek.AddDays(i)).ToList();
    }

    private void PreviousWeek()
    {
        Today = Today.AddDays(-7);
        CalculateWeek(Today);
    }

    private void NextWeek()
    {
        Today = Today.AddDays(7);
        CalculateWeek(Today);
    }

    private int CurrentWeekNumber
    {
        get
        {
            var ci = CultureInfo.CurrentCulture;
            return ci.Calendar.GetWeekOfYear(Today, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
        }
    }

    private void GenerateTimeSlots()
    {
        TimeSlots.Clear();
        for (int hour = 11; hour < 23; hour++)
        {
            var slot = new TimeSlot
            {
                Label = $"{hour:00}-{(hour + 1) % 24:00}",
                StartTime = TimeSpan.FromHours(hour)
            };
            TimeSlots.Add(slot);
        }
    }

    private string? GetUsernameForSlot(DateTime day, TimeSpan time)
    {
        var booking = AllBookings.FirstOrDefault(b =>
            b.Date.Date == day.Date.Date && b.StartTime == time);

        return booking != null && booking.Type != "Free" ? booking.Username : null;
    }

    private string GetSlotStatus(DateTime day, TimeSpan time)
    {
        var booking = AllBookings.FirstOrDefault(b =>
            b.Date.Date == day.Date.Date && b.StartTime == time);

        return booking?.Type ?? "Free";  // falls back to "Free" if not found
    }

    private void OpenDay(DateTime day)
    {
        // TODO: Navigate to day view later
        Console.WriteLine($"Clicked on {day.ToShortDateString()}");
    }

    private string CapitalizeFirstLetter(string input)
    {
        return string.IsNullOrEmpty(input) ? input : char.ToUpper(input[0]) + input.Substring(1);
    }

    private void BookSlot(DateTime day, TimeSpan time)
    {
        if (!userSessionService.IsLoggedIn || string.IsNullOrWhiteSpace(userSessionService.Username))
        {
            bookingMessage = "Du måste vara inloggad för att boka en tid.";
            return;
        }

        var username = userSessionService.Username!;
        bookingMessage = "";

        Console.WriteLine($"[BookSlot] Looking for slot at {day:yyyy-MM-dd} {time}");

        var booking = AllBookings.FirstOrDefault(b =>
            b.Date.Date == day.Date.Date && b.StartTime == time);

        selectedDay = day.Date;
        selectedTime = time;
        selectedStatus = booking?.Type ?? "Free";
        selectedUsername = booking?.Username ?? "";
        showPopup = true;
    }

    private async Task HandlePopupResult(string? newStatus)
    {
        showPopup = false;

        // Cancel or no change
        if (string.IsNullOrWhiteSpace(newStatus) || newStatus == selectedStatus)
            return;

        var username = userSessionService.Username;
        if (string.IsNullOrWhiteSpace(username))
            return;

        // Unbook (status is Free)
        if (newStatus == "Free")
        {
            Console.WriteLine($"[Unbook] Target = {selectedDay:yyyy-MM-dd} {selectedTime}");
            AllBookings = await Http.GetFromJsonAsync<List<Booking>>("/bookings") ?? new();
            AllBookings = AllBookings.Select(b => { b.Date = b.Date.Date; return b; }).ToList();

            var existing = AllBookings.FirstOrDefault(b =>
                b.Date.Date == selectedDay.Date && b.StartTime == selectedTime);

            if (existing != null)
            {
                Console.WriteLine($"[Unbook] Found ID = {existing.Date:yyyy-MM-dd} {existing.StartTime}");
                var dateStr = existing.Date.ToString("yyyy-MM-dd");
                var timeStr = existing.StartTime.ToString(@"hh\:mm\:ss");

                var response = await Http.DeleteAsync($"/bookings/{dateStr}/{timeStr}");
                if (response.IsSuccessStatusCode)
                {
                    AllBookings.Remove(existing);
                    CalculateWeek(Today);
                    StateHasChanged();
                }
            }
            return;
        }

        // Book or rebook
        var newBooking = new Booking
        {
            Date = selectedDay,
            StartTime = selectedTime,
            Username = username,
            Type = newStatus
        };

        var postResponse = await Http.PostAsJsonAsync("/bookings", newBooking);
        if (postResponse.IsSuccessStatusCode)
        {
            // Remove old and add new
            AllBookings.RemoveAll(b => b.Date == selectedDay && b.StartTime == selectedTime);
            AllBookings.Add(newBooking);
            StateHasChanged();
        }
    }

    public class TimeSlot
    {
        public string Label { get; set; } = "";
        public TimeSpan StartTime { get; set; }
    }

    public class Booking
    {
        public DateTime Date { get; set; }
        public TimeSpan StartTime { get; set; }
        public string Username { get; set; } = "";
        public string Type { get; set; } = "Private"; // ← "Private", "Open", "Blocked"
    }
}