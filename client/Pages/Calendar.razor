@page "/calendar"
@using System.Globalization

<div class="calendar-wrapper">
    <h1 class="text-center my-4 text-2xl font-semibold">Bokningskalender</h1>

    <!-- Date/week header with responsive font size -->
    <div class="text-center text-sm sm:text-base font-semibold mb-4">
        <span>@StartOfWeek.ToString("yyyy-MM-dd") / Vecka @CurrentWeekNumber / @EndOfWeek.ToString("yyyy-MM-dd")</span>
    </div>

    <div class="overflow-x-auto">
        <div class="calendar-grid">
            <table class="table-auto border-collapse">
                <thead>
                    <tr>
                        <!-- Smaller font + padding on mobile for header column -->
                        <th class="border p-1 text-xs sm:text-sm md:text-base">Tid</th>
                        @foreach (var day in DaysOfWeek)
                        {
                            <!-- Smaller font + padding on mobile for weekday headers -->
                            <th class="border p-1 text-xs sm:text-sm md:text-base cursor-pointer hover:bg-gray-100" @onclick="() => OpenDay(day)">
                                @CapitalizeFirstLetter(day.ToString("ddd dd MMM", new CultureInfo("sv-SE")))
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var slot in TimeSlots)
                    {
                        <tr>
                            <td class="border p-2">@slot.Label</td>
                            @foreach (var day in DaysOfWeek)
                            {
                                var status = GetSlotStatus(day, slot.StartTime);

                                <!-- Square layout, dynamic width on mobile, no padding -->
                                <td class="aspect-square w-10 sm:w-12 md:w-14 border p-0 text-center hover:cursor-pointer"
                                    style="background-color:@GetColorForStatus(status)"
                                    title="@GetUsernameForSlot(day, slot.StartTime)">
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private DateTime Today = DateTime.Today;
    private DateTime StartOfWeek;
    private DateTime EndOfWeek;
    private List<DateTime> DaysOfWeek = new();
    private List<TimeSlot> TimeSlots = new();

    protected override void OnInitialized()
    {
        CalculateWeek(Today);
        GenerateTimeSlots();
    }

    private void CalculateWeek(DateTime referenceDate)
    {
        var diff = (7 + (referenceDate.DayOfWeek - DayOfWeek.Monday)) % 7;
        StartOfWeek = referenceDate.AddDays(-diff).Date;
        EndOfWeek = StartOfWeek.AddDays(6);
        DaysOfWeek = Enumerable.Range(0, 7).Select(i => StartOfWeek.AddDays(i)).ToList();
    }

    private void PreviousWeek()
    {
        Today = Today.AddDays(-7);
        CalculateWeek(Today);
    }

    private void NextWeek()
    {
        Today = Today.AddDays(7);
        CalculateWeek(Today);
    }

    private int CurrentWeekNumber
    {
        get
        {
            var ci = CultureInfo.CurrentCulture;
            return ci.Calendar.GetWeekOfYear(Today, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
        }
    }

    private void GenerateTimeSlots()
    {
        TimeSlots.Clear();
        for (int hour = 11; hour < 23; hour++)
        {
            var slot = new TimeSlot
            {
                Label = $"{hour:00}-{(hour + 1) % 24:00}",
                StartTime = TimeSpan.FromHours(hour)
            };
            TimeSlots.Add(slot);
        }
    }

    // ---- FAKE MOCK DATA ----
    private string GetSlotStatus(DateTime day, TimeSpan startTime)
    {
        // Saturday (lördag) 15-19 is always blue
        if (day.DayOfWeek == DayOfWeek.Saturday && (startTime.Hours == 15 || startTime.Hours == 17))
        {
            return "Open";
        }

        // Example hardcoded dummy rules:
        if (startTime.Hours == 9 && day.DayOfWeek == DayOfWeek.Wednesday)
            return "Private";

        if (startTime.Hours == 11 && day.DayOfWeek == DayOfWeek.Monday)
            return "Blocked";

        return "Free"; // Default free
    }

    private string GetColorForStatus(string status) => status switch
    {
        "Free" => "#228B22" ,   // Forest Green
        "Private" => "#f08080", // Light red
        "Open" => "#add8e6",    // Light blue
        "Blocked" => "#d3d3d3", // Light gray
        _ => "white"
    };

    private string GetUsernameForSlot(DateTime day, TimeSpan startTime)
    {
        // Mock: Only show username on booked slots
        if (GetSlotStatus(day, startTime) == "Private")
            return "AnvändareX";
        if (GetSlotStatus(day, startTime) == "Open")
            return "AnvändareY";
        return "";
    }

    private void OpenDay(DateTime day)
    {
        // TODO: Navigate to day view later
        Console.WriteLine($"Clicked on {day.ToShortDateString()}");
    }

    public class TimeSlot
    {
        public string Label { get; set; } = "";
        public TimeSpan StartTime { get; set; }
    }

    private string CapitalizeFirstLetter(string input)
    {
        return string.IsNullOrEmpty(input) ? input : char.ToUpper(input[0]) + input.Substring(1);
    }
}