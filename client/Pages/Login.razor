@page "/login"
@using SaunaBooking.Client.Services
@using SaunaBooking.Client.Models

@inject UserSessionService Session
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="login-container">
    <h2>Logga in</h2>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="error-message">
            @ErrorMessage
        </div>
    }

    <EditForm Model="LoginModel" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="username">Användarnamn</label>
            <InputText id="username" class="input-field" @bind-Value="LoginModel.Username" />
        </div>

        <div class="form-group">
            <label for="password">Lösenord</label>
            <InputText id="password" type="password" class="input-field" @bind-Value="LoginModel.Password" />
        </div>

        <button type="submit" class="login-button">Logga in</button>
    </EditForm>
</div>

@code {
    private LoginRequest LoginModel = new();
    private string ErrorMessage = string.Empty;

    private async Task HandleLogin()
    {
        var result = await Session.LoginAsync(LoginModel);

        if (result.Success)
        {
            await JS.InvokeVoidAsync("alert", $"Välkommen {LoginModel.Username}!");
            Navigation.NavigateTo("dashboard");
        }
        else
        {
            ErrorMessage = result.Message;
        }
    }
}