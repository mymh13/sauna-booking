@inject IJSRuntime JS
@inject NavigationManager Navigation

<nav class="nav-menu">
    <div class="nav-container">
        <a class="nav-link" href="https://mymh.dev">mymh.dev</a>
        <NavLink href="calendar" class="nav-link" Match="NavLinkMatch.All">Kalender</NavLink>

        @if (!string.IsNullOrEmpty(LoggedInUsername))
        {
            <NavLink href="dashboard" class="nav-link" Match="NavLinkMatch.All">Dashboard</NavLink>
            <span class="nav-user">Inloggad som: @LoggedInUsername</span>
            <button class="nav-button" @onclick="Logout">Logga ut</button>
        }
        else
        {
            <NavLink href="login" class="nav-link" Match="NavLinkMatch.All">Logga in</NavLink>
        }
    </div>
</nav>

@code {
    private string? LoggedInUsername;

    protected override async Task OnInitializedAsync()
    {
        LoggedInUsername = await JS.InvokeAsync<string>("localStorage.getItem", "username");
    }

    private async Task Logout()
    {
        await JS.InvokeVoidAsync("localStorage.removeItem", "username");
        await JS.InvokeVoidAsync("localStorage.removeItem", "role");
        LoggedInUsername = null;
        Navigation.NavigateTo("/sauna/");
    }
}