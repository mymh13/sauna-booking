@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject SaunaBooking.Client.Services.UserSessionService Session

<nav class="nav-menu">
    <div class="nav-container">
        <div class="nav-left desktop-only">
            <NavLink href="calendar" class="nav-link uppercase" Match="NavLinkMatch.All">KALENDER</NavLink>
            <NavLink href="dashboard" class="nav-link uppercase" Match="NavLinkMatch.All">MINA SIDOR</NavLink>
        </div>

        <!-- Mobile: hamburger + theme button side by side -->
        <div class="mobile-only w-full flex justify-between items-center px-4">
            <button class="nav-button" @onclick="ToggleMobileMenu">☰ Meny</button>
            <button class="nav-button" @onclick="ToggleTheme">@CurrentThemeLabel</button>
        </div>

        @if (ShowMobileMenu)
        {
            <div class="mobile-only mobile-menu text-center mt-2">
                <NavLink href="calendar" class="nav-link uppercase block">Kalender</NavLink>
                <NavLink href="dashboard" class="nav-link uppercase block">Dashboard</NavLink>
            </div>
        }

        <div class="nav-center desktop-only">
            @if (!string.IsNullOrEmpty(Session.Username))
            {
                <span class="nav-user">Inloggad som: @Session.Username</span>
            }
        </div>

        <div class="nav-right desktop-only">
            @if (!string.IsNullOrEmpty(Session.Username))
            {
                <button class="nav-button" @onclick="Logout">Logga ut</button>
            }
            <button class="nav-button" @onclick="ToggleTheme">@Session.ThemeLabel</button>
        </div>
    </div>
</nav>

@code {
    private bool ShowMobileMenu = false;

    protected override void OnInitialized()
    {
        // Nothing needed if Session is used for state
    }

    private void Logout()
    {
        Session.Username = null;
        Navigation.NavigateTo("/"); // or login page
    }

    private void ToggleTheme()
    {
        Session.ToggleTheme();
    }
}